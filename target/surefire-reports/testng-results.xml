<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="4" ignored="0" total="15" passed="11">
  <reporter-output>
  </reporter-output>
  <suite name="DemoProject" duration-ms="63069" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:12:20Z">
    <groups>
    </groups>
    <test name="Tests" duration-ms="63069" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:12:20Z">
      <class name="com.sample.test.demo.tests.Functional_NEG">
        <test-method status="PASS" signature="init()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="init" is-config="true" duration-ms="26444" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:11:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="FAIL" signature="NEG_boundary_value_test1()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="NEG_boundary_value_test1" duration-ms="4313" started-at="2020-12-28T10:11:44Z" finished-at="2020-12-28T10:11:48Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at com.sample.test.demo.tests.Functional_NEG.NEG_boundary_value_test1(Functional_NEG.java:65)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NEG_boundary_value_test1 -->
        <test-method status="FAIL" signature="NEG_boundary_value_test2()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="NEG_boundary_value_test2" duration-ms="13480" started-at="2020-12-28T10:11:48Z" finished-at="2020-12-28T10:12:02Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at com.sample.test.demo.tests.Functional_NEG.NEG_boundary_value_test2(Functional_NEG.java:88)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NEG_boundary_value_test2 -->
        <test-method status="FAIL" signature="NEG_select_both_payment()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="NEG_select_both_payment" duration-ms="1761" started-at="2020-12-28T10:12:02Z" finished-at="2020-12-28T10:12:03Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at com.sample.test.demo.tests.Functional_NEG.NEG_select_both_payment(Functional_NEG.java:19)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NEG_select_both_payment -->
        <test-method status="FAIL" signature="NEG_wrong_field_information()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="NEG_wrong_field_information" duration-ms="5066" started-at="2020-12-28T10:12:03Z" finished-at="2020-12-28T10:12:09Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertEqualsImpl(Assert.java:137)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:568)
at org.testng.Assert.assertEquals(Assert.java:578)
at com.sample.test.demo.tests.Functional_NEG.NEG_wrong_field_information(Functional_NEG.java:43)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NEG_wrong_field_information -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.sample.test.demo.tests.Functional_NEG@51081592]" name="tearDown" is-config="true" duration-ms="295" started-at="2020-12-28T10:12:09Z" finished-at="2020-12-28T10:12:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.sample.test.demo.tests.Functional_NEG -->
      <class name="com.sample.test.demo.tests.DemoTest">
        <test-method status="PASS" signature="init()[pri:0, instance:com.sample.test.demo.tests.DemoTest@5034c75a]" name="init" is-config="true" duration-ms="23975" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:11:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="demoTest()[pri:0, instance:com.sample.test.demo.tests.DemoTest@5034c75a]" name="demoTest" duration-ms="1" started-at="2020-12-28T10:11:41Z" finished-at="2020-12-28T10:11:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demoTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.sample.test.demo.tests.DemoTest@5034c75a]" name="tearDown" is-config="true" duration-ms="1037" started-at="2020-12-28T10:11:41Z" finished-at="2020-12-28T10:11:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.sample.test.demo.tests.DemoTest -->
      <class name="com.sample.test.demo.tests.Functional_POS">
        <test-method status="PASS" signature="init()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="init" is-config="true" duration-ms="26173" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:11:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="REP_place_order_cash()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_cash" duration-ms="5129" started-at="2020-12-28T10:11:44Z" finished-at="2020-12-28T10:11:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_cash -->
        <test-method status="PASS" signature="REP_place_order_cash_missing_field()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_cash_missing_field" duration-ms="5988" started-at="2020-12-28T10:11:49Z" finished-at="2020-12-28T10:11:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_cash_missing_field -->
        <test-method status="PASS" signature="REP_place_order_cash_missing_nonmad_field()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_cash_missing_nonmad_field" duration-ms="6010" started-at="2020-12-28T10:11:55Z" finished-at="2020-12-28T10:12:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_cash_missing_nonmad_field -->
        <test-method status="PASS" signature="REP_place_order_cc()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_cc" duration-ms="5421" started-at="2020-12-28T10:12:01Z" finished-at="2020-12-28T10:12:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_cc -->
        <test-method status="PASS" signature="REP_place_order_refresh_clean_field()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_refresh_clean_field" duration-ms="4814" started-at="2020-12-28T10:12:06Z" finished-at="2020-12-28T10:12:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_refresh_clean_field -->
        <test-method status="PASS" signature="REP_place_order_reset_clean_field()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="REP_place_order_reset_clean_field" duration-ms="2221" started-at="2020-12-28T10:12:11Z" finished-at="2020-12-28T10:12:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- REP_place_order_reset_clean_field -->
        <test-method status="PASS" signature="Sanity_place_order_cash()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="Sanity_place_order_cash" duration-ms="3947" started-at="2020-12-28T10:12:13Z" finished-at="2020-12-28T10:12:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sanity_place_order_cash -->
        <test-method status="PASS" signature="Sanity_place_order_cc()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="Sanity_place_order_cc" duration-ms="3079" started-at="2020-12-28T10:12:17Z" finished-at="2020-12-28T10:12:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sanity_place_order_cc -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.sample.test.demo.tests.Functional_POS@51efea79]" name="tearDown" is-config="true" duration-ms="234" started-at="2020-12-28T10:12:20Z" finished-at="2020-12-28T10:12:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.sample.test.demo.tests.Functional_POS -->
      <class name="com.sample.test.demo.tests.SanityTest">
        <test-method status="PASS" signature="init()[pri:0, instance:com.sample.test.demo.tests.SanityTest@396a51ab]" name="init" is-config="true" duration-ms="22514" started-at="2020-12-28T10:11:17Z" finished-at="2020-12-28T10:11:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="Sanity_place_order_cash()[pri:0, instance:com.sample.test.demo.tests.SanityTest@396a51ab]" name="Sanity_place_order_cash" duration-ms="8443" started-at="2020-12-28T10:11:40Z" finished-at="2020-12-28T10:11:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sanity_place_order_cash -->
        <test-method status="PASS" signature="Sanity_place_order_cc()[pri:0, instance:com.sample.test.demo.tests.SanityTest@396a51ab]" name="Sanity_place_order_cc" duration-ms="8251" started-at="2020-12-28T10:11:48Z" finished-at="2020-12-28T10:11:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Sanity_place_order_cc -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.sample.test.demo.tests.SanityTest@396a51ab]" name="tearDown" is-config="true" duration-ms="225" started-at="2020-12-28T10:11:57Z" finished-at="2020-12-28T10:11:57Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.sample.test.demo.tests.SanityTest -->
    </test> <!-- Tests -->
  </suite> <!-- DemoProject -->
</testng-results>
